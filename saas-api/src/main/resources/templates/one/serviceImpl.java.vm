package $!{projModel.packageName}.module.$!{projModel.projectName}.$!{projModel.tableName}.service.impl;

import com.baomidou.mybatisplus.core.metadata.IPage;
import $!{projModel.packageName}.module.$!{projModel.projectName}.$!{projModel.tableName}.entity.$!{projModel._TableName};
import $!{projModel.packageName}.module.$!{projModel.projectName}.$!{projModel.tableName}.dao.$!{projModel._TableName}Mapper;
import $!{projModel.packageName}.module.$!{projModel.projectName}.$!{projModel.tableName}.service.I$!{projModel._TableName}Service;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import $!{projModel.packageName}.utils.Dictionaries;
import $!{projModel.packageName}.utils.Parameter.Parameter;
import $!{projModel.packageName}.utils.Parameter.QueryEntity;
import $!{projModel.packageName}.utils.Result;
import $!{projModel.packageName}.utils.common.StringUtils;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import $!{projModel.packageName}.utils.common.GetLoginUser;
import $!{projModel.packageName}.utils.common.DateUtils;

import java.util.List;

/**
 * <p>
 *  服务实现类
 * </p>
 *
 * @author xu
 * @since 2020-05-05
 */
@Service
public class $!{projModel._TableName}ServiceImpl extends ServiceImpl<$!{projModel._TableName}Mapper, $!{projModel._TableName}> implements I$!{projModel._TableName}Service {

    @Autowired
    $!{projModel._TableName}Mapper doMapper;

    @Override
    public Result saveOrUpdateCommon($!{projModel._TableName} $!{projModel.tableName}) {
        //判断新增还是修改
        if (!StringUtils.isBlank($!{projModel.tableName}.getId())) {
            //修改
            #foreach ($item in $autoFieldList)
            #if($item.fieldName == 'update_time')
            $!{projModel.tableName}.setUpdateTime(DateUtils.getCurrentDate());
            #end
            #if($item.fieldName == 'update_user')
            $!{projModel.tableName}.setCreateUser(GetLoginUser.getCurrentUserId());
            #end
            #end
            if(!updateById($!{projModel.tableName})){

                return Result.error(Dictionaries.UPDATE_FAILED);
            }

            return Result.success(Dictionaries.SAVE_SUCCESS);
        }
        #foreach ($item in $autoFieldList)
        #if($item.fieldName == 'create_time')
        $!{projModel.tableName}.setCreateTime(DateUtils.getCurrentDate());
        #end
        #if($item.fieldName == 'create_user')
        $!{projModel.tableName}.setCreateUser(GetLoginUser.getCurrentUserId());
        #end
        #end
        $!{projModel.tableName}.setId(StringUtils.uuid());
        if (!save($!{projModel.tableName})){

            return Result.error(Dictionaries.SAVE_FAILED);
        }

        return Result.success(Dictionaries.SAVE_SUCCESS);
    }

    @Override
    public Result delete(String id) {
        if (!removeById(id)){
            return Result.error(Dictionaries.DELETE_FAILED);
        }
        return  Result.success(Dictionaries.DELETE_SUCCESS);
    }

    @Override
    public Result query(QueryEntity<$!{projModel._TableName}> parameter) {
        IPage<$!{projModel._TableName}> dataList = doMapper.queryByCondition(parameter.getPage(), parameter.getCondition());
        return new Result(dataList);
    }

    @Override
    public Result query(String id) {
        return Result.success(getById(id));
    }

    @Override
    public Result deleteBatch(List<String> ids) {
        if (!removeByIds(ids)){

            return Result.error(Dictionaries.DELETE_FAILED);
        }
        return Result.success(Dictionaries.DELETE_SUCCESS);
    }
}
